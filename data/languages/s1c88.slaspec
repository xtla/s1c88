# sleigh specification file for S1C88
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax
# Other language modules (see Ghidra/Processors) may provide better examples
# when creating a new language module.

# NOTE: NOP desert @  0x721 - 0x20FE
# debugger == documentation mistranslations addressed here
# SC = F

define endian=little;
define alignment=1;

define space register  type=register_space  size=1  wordsize=1;
define space ram       type=ram_space       size=2  wordsize=1;
define space rom       type=ram_space       size=3  wordsize=1  default;
# not done yet

define register offset=0x00 size=1 [ A B L H ];
define register offset=0x04 size=2 [IX IY PC SP];
define register offset=0x0c size=1 [BR];
define register offset=0x0e size=1 [F];
# leave out CC for now

define token instr8 (8)
  op8_instr8 = (0, 7)
  op4_instr8 = (4, 7)
  op5_instr8 = (5, 7)
  op0_2_instr8 = (0, 2)
  op2_3_instr8 = (2, 3)
  reg3_4_instr8 = (3, 4)
  reg0_1_instr8 = (0, 1)
;

define token instr16 (16)
  op8_instr16 = (0, 7)
  imm8_instr16 = (8, 15)
  op16_instr16 = (0, 15)
;

define token instr24 (24)
  op8_instr24 = (0, 7)
  imm16_instr24 = (8, 15)
  imm24_instr24 = (16, 23)
  # not implemented yet: case with 1 8-bit op8_instr8, 2 8-bit operands
  # and case with 1 16-bit op8_instr8, 1 8-bit operand
;

attach variables [ reg0_1_instr8 reg3_4_instr8 ] [ A B L H ];

:ADDA_A is op8_instr8=0x00 {}
:ADDA_B is op8_instr8=0x01 {}
:ADDA imm8_instr16 is op8_instr16=0x02 & imm8_instr16 {}
:ADD_A_HL is op8_instr8=0x03 {}
:ADDA_BR:imm8_instr16 is op8_instr16=0x04 & imm8_instr16 {}
:ADD "A","["imm24_instr24 imm16_instr24"]" is op8_instr24=0x05 & imm16_instr24 & imm24_instr24 {}

:MOV "[X]",reg0_1_instr8 is op4_instr8=0x06 & op2_3_instr8=0x00 & reg0_1_instr8 {}
:MOV "[Y]",reg0_1_instr8 is op4_instr8=0x07 & op2_3_instr8=0x00 & reg0_1_instr8 {}

# 0 1 0 r r 1 0 1
:MOV reg3_4_instr8,"[HL]" is op5_instr8=0x02 & reg3_4_instr8 & op0_2_instr8=0x05 {}
:MOV reg3_4_instr8,"[X]" is op5_instr8=0x02 & reg3_4_instr8 & op0_2_instr8=0x06 {}

:SBCA_B is op8_instr8=0x19 {}
:ORAY is op8_instr8=0x2F {}

:XOR "A","A" is op8_instr8=0x38 {}
:XOR "A","B" is op8_instr8=0x39 {}
:XOR "A",imm8_instr16 is op8_instr16=0x3A & imm8_instr16 {}
:XOR "A",imm16_instr24 imm24_instr24 is op8_instr24=0x3D & imm16_instr24 & imm24_instr24 {}

:INC imm8_instr16 is op8_instr16=0x85 & imm8_instr16 {}

:TST_B imm8_instr16 is op8_instr16=0x97 & imm8_instr16 {}

:XOR "F",imm8_instr16 is op8_instr16=0x9E & imm8_instr16 {}

:DEC_X is op8_instr8=0x9A {}
:DEC_BA is op8_instr8=0x98 {}

:POPY is op8_instr8=0xAB {}
:POPHL is op8_instr8=0xA9 {}

:MOV "[Y]","["imm24_instr24 imm16_instr24"]" is op8_instr24=0xBB & imm16_instr24 & imm24_instr24 {}

:UNPACK is op8_instr8=0xDF {}

:JMP_JRS reloc is op8_instr16=0xF1 & imm8_instr16 [reloc=inst_next;] {
  local reloc_:2 = inst_next + imm8_instr16; # Removed the -1 to fix problem w/ stopping decompilation
  goto [reloc_];
}

:JMP_JRL imm24_instr24 imm16_instr24    is op8_instr24=0xF3 & imm16_instr24 & imm24_instr24 {}

:NOP is op8_instr8=0xFF {}

# define endian=little;
# define alignment=1;
#
# define space ram     type=ram_space      size=2  default;
#
# define space io      type=ram_space      size=2;
# define space register type=register_space size=1;
#
# define register offset=0x00 size=1 [ F A C B E D L H I R ];
# define register offset=0x00 size=2 [ AF  BC  DE  HL ];
# define register offset=0x20 size=1 [ A_ F_ B_ C_ D_ E_ H_ L_ ]; # Alternate registers
# define register offset=0x20 size=2 [ AF_   BC_   DE_   HL_ ]; # Alternate registers
#
# define register offset=0x40 size=2 [ _  PC SP IX IY ];
#
# define register offset=0x50 size=1 [ rCBAR rCBR rBBR ];
#
# # Define context bits (if defined, size must be multiple of 4-bytes)
# define register offset=0xf0 size=4   contextreg;
#
# define context contextreg
#   assume8bitIOSpace		= (0,0)
# ;
#
# # Flag bits (?? manual is very confusing - could be typos!)
# @define C_flag "F[0,1]"		# C: Carry
# @define N_flag "F[1,1]"		# N: Add/Subtract
# @define PV_flag "F[2,1]"	# PV: Parity/Overflow
# @define H_flag "F[4,1]"		# H: Half Carry
# @define Z_flag "F[6,1]"		# Z: Zero
# @define S_flag "F[7,1]"		# S: Sign
#
# # Include contents of skel.sinc file
# @include "skel.sinc"
