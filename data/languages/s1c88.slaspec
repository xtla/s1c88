# sleigh specification file for S1C88
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax
# Other language modules (see Ghidra/Processors) may provide better examples
# when creating a new language module.

# comment syntax note: r=A B H L rr=BR HL IX IY exr=U I XI YI
# NOTE: NOP desert @  0x721 - 0x20FE
# S1C88 Manual Symbol = PokeMiniD Symbol
# SC = F
# NB = U
# CB = V
# EP = I
# XP = XI
# YP = YI

define endian=little;
define alignment=1;

define space register  type=register_space  size=1  wordsize=1;
define space ram       type=ram_space       size=2  wordsize=1;
define space rom       type=ram_space       size=3  wordsize=1  default;
# not done yet

# Standard registers
define register offset=0x00 size=1 [A B L H];
define register offset=0x00 size=2 [BA HL];
define register offset=0x04 size=2 [IX IY PC SP];
define register offset=0x0c size=2 [BR];
define register offset=0x0e size=1 [F];
# leave out CC for now

# Expansion registers
# The offset here is arbitrary; it's just to avoid overlap with the standard registers.
# TODO here: figure out how to specify that XI and YI are extensions to their corresponding standard registers
define register offset=0x10 size=1 [U V I XI YI];

@define Z_flag "F[0,1]" # Z: Zero
@define C_flag "F[1,1]" # C: Carry
@define O_flag "F[2,1]" # O: Overflow
@define S_flag "F[3,1]" # S: Sign
@define BCD_flag "F[4,1]" # BCD: Binary Coded Decimal Mode
@define NIB_flag "F[5,1]" # NIB: Low-Mask Mode ("Nibble")
@define ID_flag "F[6,1]" # ID: Interrupt Disable
@define IB_flag "F[7,1]" # IB: Interrupt Branch

define token instr8 (8)
  op8_instr8 = (0, 7)
  op4_instr8 = (4, 7)
  op5_instr8 = (5, 7)
  op0_2_instr8 = (0, 2)
  op2_3_instr8 = (2, 3)
  reg3_4_instr8 = (3, 4)
  reg0_1_instr8 = (0, 1)
  dreg0_1_instr8 = (0, 1)
  b_reg0_1_instr8 = (0, 1)
  c_reg0_1_instr8 = (0, 1)
;

define token instr16 (16)
  op8_instr16 = (0, 7)
  imm8_instr16 = (8, 15)
  imm8_signed_instr16 = (8, 15) signed
  op16_instr16 = (0, 15)
  reg8_instr16 = (8, 15)
  op10_11_instr16 = (10, 11)
  op12_15_instr16 = (12, 15)
  op15_15_instr16 = (15, 15)
  reg8_9_instr16 = (8, 9)
  b_reg8_9_instr16 = (8, 9)
  imm8_14_instr16 = (8, 14)
  a_reg14_15_instr16 = (14, 15)
  b_reg14_15_instr16 = (14, 15)
  c_reg8_11_instr16 = (8, 11)
  ext_reg0_1_instr16  = (0, 1)
;

define token instr24 (24)
  op8_instr24 = (0, 7)
  op16_instr24 = (8, 15)
  op12_15_instr24 = (12, 15)
  op10_11_instr24 = (10, 11)
  op9_instr24 = (9, 9)
  op16_23_instr24 = (16, 23)
  imm8_15_instr24 = (8, 15)
  imm16_23_instr24 = (16, 23)
  imm16_23_signed_instr24 = (16, 23) signed
  imm8_23_signed_instr24 = (8, 23) signed
  d_reg_8_instr24 = (8, 8)
  b_reg8_9_instr24 = (8, 9)
;

define token instr32 (32)
  op16_instr32 = (0, 15)
  imm16_instr32 = (16, 31)
;

attach variables [ reg0_1_instr8 reg3_4_instr8 reg8_9_instr16 ] [ A B L H ];
attach variables [ dreg0_1_instr8 a_reg14_15_instr16 ] [BR HL IX IY];
attach variables [b_reg14_15_instr16 b_reg8_9_instr24 b_reg8_9_instr16 b_reg0_1_instr8 ] [BA HL IX IY];
attach variables [ c_reg0_1_instr8 ] [HL IX IY SP];
attach variables [ d_reg_8_instr24 ] [ IX IY ];
attach variables [ ext_reg0_1_instr16  ] [U I XI YI];
# attach variables [c_reg8_11_instr16] [SP PC];

:ADDA_A is op8_instr8=0x00 {}
:ADDA_B is op8_instr8=0x01 {}
:ADDA imm8_instr16 is op8_instr16=0x02 & imm8_instr16 {}
:ADD_A_HL is op8_instr8=0x03 {}
:ADDA_BR:imm8_instr16 is op8_instr16=0x04 & imm8_instr16 {}
:ADD "A","["imm16_23_instr24 imm8_15_instr24"]" is op8_instr24=0x05 & imm8_15_instr24 & imm16_23_instr24 {}
# add IY, #hhll
:ADD "Y",imm16_23_instr24 imm8_15_instr24    is op8_instr24=0xC3 & imm8_15_instr24 & imm16_23_instr24 {}

:ADD "HL",imm8_15_instr24 is op8_instr24=0xC1 & imm8_15_instr24 {}

:AND "F",imm8_instr16   is op8_instr16=0x9C & imm8_instr16 {}

# cmp A,#nn
:CMP "A",imm8_instr16   is op8_instr16=0x32 & imm8_instr16 {}
:CMP "[HL]",imm16_23_instr24    is op8_instr24=0xCE & op16_instr24=0x35 & imm16_23_instr24 {}

:DEC b_reg0_1_instr8 is op4_instr8=9 & op2_3_instr8=2 & b_reg0_1_instr8  {}
:DEC reg0_1_instr8 is op4_instr8=8 & op2_3_instr8=2 & reg0_1_instr8  {}

# 0b 0110 0001
#    7654 3210
:MOV "[X]",reg0_1_instr8    is op4_instr8=0x06 & op2_3_instr8=0x00 & reg0_1_instr8 {}
# mov [X], [rr]
:MOV "[X],["dreg0_1_instr8"]"    is op4_instr8=0b0110 & op2_3_instr8=0b01 & dreg0_1_instr8 {}
:MOV "[Y]",reg0_1_instr8    is op4_instr8=0x07 & op2_3_instr8=0x00 & reg0_1_instr8 {}
:MOV "[Y]","["imm16_23_instr24 imm8_15_instr24"]"    is op8_instr24=0xBB & imm8_15_instr24 & imm16_23_instr24 {}
:MOV reg3_4_instr8,"[HL]"   is op5_instr8=0x02 & reg3_4_instr8 & op0_2_instr8=0x05 {}
:MOV reg3_4_instr8,"[X]"    is op5_instr8=0x02 & reg3_4_instr8 & op0_2_instr8=0x06 {}
:MOV "U",imm16_23_instr24    is op8_instr24=0xCE & imm8_15_instr24=0xC4 & imm16_23_instr24 {}

# mov L,r
:MOV "L",reg0_1_instr8    is op4_instr8=5 & op2_3_instr8=0 & reg0_1_instr8 {}
# mov L,[BR:bb]
:MOV "L,[BR:"imm8_instr16"]"    is op8_instr16=0x54 & imm8_instr16 {}

:MOV "F",imm8_instr16 is op8_instr16=0x9F & imm8_instr16 {}

# mov B,r
:MOV "B",reg0_1_instr8    is op4_instr8=4 & op2_3_instr8=2 & reg0_1_instr8 {}
# mov B,#nn
:MOV "B",imm8_instr16    is op8_instr16=0xB1 & imm8_instr16 {}
:MOV "B,["d_reg_8_instr24"+"imm16_23_instr24"]"   is op8_instr24=0xCE & op12_15_instr24=0x4 & op10_11_instr24=2 & op9_instr24=0 & d_reg_8_instr24 & imm16_23_instr24 {}

:MOV_A_CONTENTS_HL    is op16_instr16=0xC0CF {}

:MOV "A,[BR:"imm8_instr16"]"    is op8_instr16=0x44 & imm8_instr16 {}
:MOV_A_IX is op16_instr16=0xCACE {}
:MOV "A",imm8_instr16   is op8_instr16=0xb0 & imm8_instr16 {}
:MOV "A",reg0_1_instr8  is op4_instr8=0x4 & op2_3_instr8=0 & reg0_1_instr8 {}
:MOV "A,["d_reg_8_instr24"+"imm16_23_instr24"]"   is op8_instr24=0xCE & op12_15_instr24=0x4 & op10_11_instr24=0 & op9_instr24=0 & d_reg_8_instr24 & imm16_23_instr24 {}

:MOV "N",imm8_instr16 is op8_instr16=0xB4 & imm8_instr16 {}

# mov [HL], [rr]
:MOV "[HL],["dreg0_1_instr8"]"    is op4_instr8=0b0110 & op2_3_instr8=0b11 & dreg0_1_instr8 {}
# mov [HL], r
:MOV "[HL]",reg0_1_instr8    is op4_instr8=0b0110 & op2_3_instr8=0b10 & reg0_1_instr8 {}

# mov A,YI
:MOV "A",ext_reg0_1_instr16 is op8_instr16=0xCE & op12_15_instr16=0xC & op10_11_instr16=0b10 & ext_reg0_1_instr16 {}

# mov HL, BA
:MOV "HL",b_reg8_9_instr16 is op8_instr16=0xCF & op12_15_instr16=0xE & op10_11_instr16=1 & b_reg8_9_instr16 {}
# mov [HL], rr
:MOV "[HL]",b_reg8_9_instr16 is op8_instr16=0xCF & op12_15_instr16=0xC & op10_11_instr16=1 & b_reg8_9_instr16 {}

# 0x    C    F    F    4
# 0b 1100 1111 1111 0100
#    7654 3210 FEDC BA98
:MOV_HL_SP is op8_instr16=0xCF & op12_15_instr16=0xF & c_reg8_11_instr16=0x4 {}

:MOV "BA",b_reg8_9_instr16 is op8_instr16=0xCF & op12_15_instr16=0xE & op10_11_instr16=0 & b_reg8_9_instr16 {}
:MOV "SP",imm16_instr32 is op16_instr32=0x6ECF & imm16_instr32 {}
:MOV "[SP+"imm16_23_instr24"]",b_reg8_9_instr24    is op8_instr24=0xCF & op12_15_instr24=7 & op10_11_instr24=1 & b_reg8_9_instr24 & imm16_23_instr24 {}

# mov BA,#mmnn
:MOV "BA",imm16_23_instr24 imm8_15_instr24 is op8_instr24=0xC4 & imm8_15_instr24 & imm16_23_instr24 {}
# mov HL,#mmnn
:MOV "HL",imm16_23_instr24 imm8_15_instr24 is op8_instr24=0xC5 & imm8_15_instr24 & imm16_23_instr24 {}

# CE,C5 as mov I, #pp
:MOV "I",imm16_23_instr24    is op8_instr24=0xCE & imm8_15_instr24=0xC5 & imm16_23_instr24 {}
# mov X,#nn
:MOV "X",imm16_23_instr24    is op8_instr24=0xCE & imm8_15_instr24=0xC6 & imm16_23_instr24 {}
:MOV "Y",imm16_23_instr24    is op8_instr24=0xCE & imm8_15_instr24=0xC7 & imm16_23_instr24 {}
:MOV "Y",b_reg8_9_instr16   is op8_instr16=0xCF & op12_15_instr16=0xE & op10_11_instr16=3 & b_reg8_9_instr16 {}
:MOV "[Y]",imm8_instr16   is op8_instr16=0xB7 & imm8_instr16 {}

:MOV_X_A    is op16_instr16=0xCECE {}
:MOV_Y_A    is op16_instr16=0xCFCE {}
:MOV "X",b_reg8_9_instr16   is op8_instr16=0xCF & op12_15_instr16=0b1110 & op10_11_instr16=0b10 & b_reg8_9_instr16 {}

:MOV ["N"+imm8_15_instr24], imm16_23_instr24 is op8_instr24=0xDD & imm8_15_instr24 & imm16_23_instr24 {}

:MUL "L,A" is op16_instr16=0xD8CE {}

:SBCA_B is op8_instr8=0x19 {}

:SUB "A",imm8_instr16 is op8_instr16=0x12 & imm8_instr16 {}
:SUB "BA",b_reg8_9_instr16 is op8_instr16=0xCF & op12_15_instr16=0 & op10_11_instr16=0b10 & b_reg8_9_instr16 {}

:ORAY is op8_instr8=0x2F {}
:OR "A",imm8_instr16 is op8_instr16=0x2A & imm8_instr16 {}
:OR "F",imm8_instr16 is op8_instr16=0x9D & imm8_instr16 {}

:XCHNG_A_B is op8_instr8=0xCC {}
:XCHNG_A_CONTENTS_HL is op8_instr8=0xCD {}
# C 1 0 r r
:XCHNG "BA",c_reg0_1_instr8 is op4_instr8=0xC & op2_3_instr8=0b10 & c_reg0_1_instr8 {}

:XOR "A","A" is op8_instr8=0x38 {}
:XOR "A","B" is op8_instr8=0x39 {}
:XOR "A",imm8_instr16 is op8_instr16=0x3A & imm8_instr16 {}
:XOR "A",imm8_15_instr24 imm16_23_instr24 is op8_instr24=0x3D & imm8_15_instr24 & imm16_23_instr24 {}
:XOR "F",imm8_instr16 is op8_instr16=0x9E & imm8_instr16 {}

:INC imm8_instr16 is op8_instr16=0x85 & imm8_instr16 {}
:INC b_reg0_1_instr8 is op4_instr8=9 & op2_3_instr8=0 & b_reg0_1_instr8  {}
:INT_CONTENTS_HL is op8_instr8=0x86 {}
:INC reg0_1_instr8  is op4_instr8=8 & op2_3_instr8=0 & reg0_1_instr8 {}

:TST_B imm8_instr16 is op8_instr16=0x97 & imm8_instr16 {}

:POP b_reg0_1_instr8  is op4_instr8=0b1010 & op2_3_instr8=0b10 & b_reg0_1_instr8 {}
:POP reg8_9_instr16 is op8_instr16=0xCF & op12_15_instr16=0xB & op10_11_instr16=1 & reg8_9_instr16 {}
:POP_I is op8_instr8=0xAD {}
:POP_X is op8_instr8=0xAE {}

:PUSH_IY    is op8_instr8=0xA3 {}
:PUSH_IX    is op8_instr8=0xA2 {}
:PUSH_ALL   is op8_instr16=0xCE & imm8_instr16=0xB8 {}
:PUSH_B     is op8_instr16=0xCF & imm8_instr16=0xB1 {}
:PUSH_BA    is op8_instr8=0xA0 {}
:PUSH_IP    is op8_instr8=0xA6 {}
:PUSH_ALE   is op8_instr16=0xCE & imm8_instr16=0xB9 {}
:PUSH_L     is op8_instr16=0xCE & imm8_instr16=0xB2 {}
:PUSH_HL    is op8_instr8=0xA1 {}
:PUSH_A     is op8_instr16=0xCE & imm8_instr16=0xB0 {}
:PUSH_BR    is op8_instr8=0xA4 {}
:PUSH_H     is op8_instr16=0xCE & imm8_instr16=0xB3 {}
:PUSH_F     is op8_instr8=0xA7 {}
:PUSH_I     is op8_instr8=0xA5 {}

:UNPACK is op8_instr8=0xDF {}

# Named constructors for relative jump destinations
# In the S1C88 manual, these are written as `PC + 1` (i.e. `inst_start + 1`) or `PC + 2`,
# depending on which jump instruction it's attached to:
# instructions with a 1-byte opcode have `PC + 1`,
# instructions with a 2-byte opcode have `PC + 2`.
# Here, we just define the relative address using `inst_next - 1`, so that we can
# simplify how the constructors are defined here.

jrs_dest_instr16: reloc is imm8_signed_instr16 [reloc = (inst_next - 1 + imm8_signed_instr16) & 0xFFFF;] {
  export *:4 reloc;
}

jrs_dest_instr24: reloc is imm16_23_signed_instr24 [reloc = (inst_next - 1 + imm16_23_signed_instr24) & 0xFFFF;] {
  export *:4 reloc;
}

jrl_dest: reloc is imm8_23_signed_instr24 [reloc = (inst_next - 1 + imm8_23_signed_instr24) & 0xFFFF;] {
  export *:4 reloc;
}

# Conditional relative short jumps

# JMP IF CARRY FLAG SET
:JCb_JRS jrs_dest_instr16 is op8_instr16=0xE4 & jrs_dest_instr16 {
  if ($(C_flag) == 1) goto jrs_dest_instr16;
}

:JNCb_JRS jrs_dest_instr16 is op8_instr16=0xE5 & jrs_dest_instr16 {
  if ($(C_flag) == 0) goto jrs_dest_instr16;
}

:JZ_JRS jrs_dest_instr16 is op8_instr16=0xE6 & jrs_dest_instr16 {
  if ($(Z_flag) == 1) goto jrs_dest_instr16;
}

:JNZ_JRS jrs_dest_instr16 is op8_instr16=0xE7 & jrs_dest_instr16 {
  if ($(Z_flag) == 0) goto jrs_dest_instr16;
}

:JL_JRS jrs_dest_instr24 is op8_instr24=0xCE & op16_instr24=0xE0 & jrs_dest_instr24 {
  if ($(S_flag) ^ $(O_flag) == 1) goto jrs_dest_instr24;
}

:JG_JRS jrs_dest_instr24 is op8_instr24=0xCE & op16_instr24=0xE2 & jrs_dest_instr24 {
  if ($(Z_flag) | ($(S_flag) ^ $(S_flag)) == 0) goto jrs_dest_instr24;
}

:JLE_JRS jrs_dest_instr24 is op8_instr24=0xCE & op16_instr24=0xE1 & jrs_dest_instr24 {
  if ($(Z_flag) | ($(S_flag) ^ $(S_flag)) == 1) goto jrs_dest_instr24;
}

:JGE_JRS jrs_dest_instr24 is op8_instr24=0xCE & op16_instr24=0xE3 & jrs_dest_instr24 {
  if ($(S_flag) ^ $(S_flag) == 0) goto jrs_dest_instr24;
}

# Conditional relative long jumps

:JCb_JRL jrl_dest is op8_instr24=0xEC & jrl_dest {
  if ($(C_flag) == 1) goto jrl_dest;
}

:JNCb_JRL jrl_dest is op8_instr24=0xED & jrl_dest {
  if ($(C_flag) == 0) goto jrl_dest;
}

:JZ_JRL jrl_dest is op8_instr24=0xEE & jrl_dest {
  if ($(Z_flag) == 1) goto jrl_dest;
}

:JNZ_JRL jrl_dest is op8_instr24=0xEF & jrl_dest {
  if ($(Z_flag) == 0) goto jrl_dest;
}

# Unconditional jumps

:JMP_JRS jrs_dest_instr16 is op8_instr16=0xF1 & jrs_dest_instr16 {
  goto jrs_dest_instr16;
}

:JMP_JRL jrl_dest is op8_instr24=0xF3 & jrl_dest {
  goto jrl_dest;
}

:CALL_CARL jrl_dest is op8_instr24=0xF2 & jrl_dest {
  goto jrl_dest;
}

:NOP is op8_instr8=0xFF {}

:RET is op8_instr8=0xF8 {}
:RETI is op8_instr8=0xF9 {}

# NOTE TO C: CONTENTS_HL means [HL]
:ROLC_CONTENTS_HL is op16_instr16=0x93CE {}

# define endian=little;
# define alignment=1;
#
# define space ram     type=ram_space      size=2  default;
#
# define space io      type=ram_space      size=2;
# define space register type=register_space size=1;
#
# define register offset=0x00 size=1 [ F A C B E D L H I R ];
# define register offset=0x00 size=2 [ AF  BC  DE  HL ];
# define register offset=0x20 size=1 [ A_ F_ B_ C_ D_ E_ H_ L_ ]; # Alternate registers
# define register offset=0x20 size=2 [ AF_   BC_   DE_   HL_ ]; # Alternate registers
#
# define register offset=0x40 size=2 [ _  PC SP IX IY ];
#
# define register offset=0x50 size=1 [ rCBAR rCBR rBBR ];
#
# # Define context bits (if defined, size must be multiple of 4-bytes)
# define register offset=0xf0 size=4   contextreg;
#
# define context contextreg
#   assume8bitIOSpace		= (0,0)
# ;
#
# # Flag bits (?? manual is very confusing - could be typos!)
# @define C_flag "F[0,1]"		# C: Carry
# @define N_flag "F[1,1]"		# N: Add/Subtract
# @define PV_flag "F[2,1]"	# PV: Parity/Overflow
# @define H_flag "F[4,1]"		# H: Half Carry
# @define Z_flag "F[6,1]"		# Z: Zero
# @define S_flag "F[7,1]"		# S: Sign
#
# # Include contents of skel.sinc file
# @include "skel.sinc"

